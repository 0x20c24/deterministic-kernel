

SOURCE: This document is from https://github.com/mempo/deterministic-kernel/ - doc/build.txt
TOPIC: This document is the definitive description how to build Mempo Kernel (grsecurity kernel) 

*** This document here is most definitive. ***

Also first see README.md file here.

Use this document, it is most definitive (how ever also check other sources if they would happen
to have additional remarks sometimes)
* http:///mempo.org , http://deb.mempo.org - for the contact
* read additional info on http://wiki.debian.org/Mempo/SameKernel
* QUESTIONS - then contact us: http://wiki.debian.org/Mempo/Mempo
* QUESTIONS: chat with us on IRC on #mempo on irc.oftc.net or best on anonymous irc2p 
  (geti2p.net), or irc.freenode.org. And WAIT for THE REPLY 48 hours. Repeat question.
* source code: https://github.com/mempo/ . Check always the GPG signature.

=== Verification ===

For users/developers who wish to repeat the build process to confirm that it really does match the published checksum - read the paragraph "Verification-Details" below.

=== End Users ===

For End Users - to simply use the mempo kernels in your Debian/distro, download them from deb.mempo.org (or .i2p) as compiled
binary .deb files and follow instructions there.
Consult section "Variants" below for kernel choice.

To build them from sources just start ./run-flavour.sh "deskmax" or similar, but first
you need to install few tools. The build script should stop and tell you what to do.

=== Developers of Kernel Packing sources ==

For developers who make source of kernel package,
and mempo developers who prepare update of kernel.

Read info in README.md (and rest of this document here)
how to update source when new code is released.

=== Builders of the Kernel Package ===

To build the .deb files, there are two ways:

1) currently you should use a small script, available at:
git: https://github.com/mempo/mempobot

There you will find scripts in mempo-tools/kernelbuild/,
run the script mempo-tools/kernelbuild/download-and-build-all.sh
(from it's directory) as argument pass name of git repository to use,
e.g.:
cd ~/mempo-tools/kernelbuild/ && download-and-build-all.sh mempo

It will download that github, check git gpg signature, and build all flavours.

2) or instead, download (or unpack) the sources of this project e.g. from
https://github.com/mempo/deterministc-kernel/
and here/there run:
./run-flavour.sh "deb7/deskmax"
where "deb7/deskmax" is name of kernel flavour, see table here (or the script download-and-build-all.sh)
for other choices.

=== How to have local random seed e.g. with other randstruct ===

RANDSTRUCT is randomized code, which is good to defend against attackers but bad for reproducible builds.

You can now set own LOCAL_SEED.
Then YOUR builds will be reproducible (as long as you written down the secret seed), 
but they will be different then builds done by people who do not know your LOCAL_SEED.
This could help some of admins (Kocka?) of multiuser installations that prefer a bit higher security at cost of not verifying with regular images.

To set this seed, run this small script (once) on user that will build kernels:

( echo "This will create (and OVERRIDE any previous) hidden mempo rc config that includes random LOCAL_SEED. Back up any old seed. Type y to continue" ; read yn ; if [[ "$yn" != "y" ]] ; then echo "aborting then" ; exit ; fi ; mkdir -p $HOME/.mempo/secret/ && chmod 700 $HOME/.mempo/secret/ && f="$HOME/.mempo/secret/rc.ini" && echo -n 'LOCAL_SEED="' > "$f" && head -c 16 /dev/random | sha256sum | head -c 64 >> "$f" ; echo '"' >> "$f" ; echo "DONE. $f contains: " && cat "$f" && echo "Write this down." )

Backup/write down your LOCAL_SEED for future reference. And then run build normally. Of course you will now have other checksum then the official ones.

=== Variants ===

This is how we now imaging which versions should be provided for users (there is a security versus performance/compatibility tradeoff).

E.g. in most secure mode things are slower, Xen is blocked, Wine is blocked, most X drivers are blocks, and other things work but are made harder e.g. no auto-loading or auto-mounting - need to write scripts to make this easy for user again.

Variants of kernel config (not all are yet implemented):

    Desk - this is the current variant (previously named good). It turns out all protections (especially in recent versions) except ioport/kmem blocks and [since 2014.08.21] except some options that are considered too restrictive for desktop, e.g. without some proc restrictions that block sound system etc.
    DeskMax - [since 2014.08.21] (previously Desk had this role basically) this is the spartan desktop, allows ioport/kmem (as long as it's needed for most gfx cards) but blocks everything else e.g. even sound support possibly
    Serv - for servers mostly this will also turn on ioport/kmem, meaning that kernel will be extremely strongly protected from being damaged by other programs or most parts of kernel. Desktops can use this too but will need a fix to X server and require open good gfx drivers.
    ServMax - same but could turn on various "paranoid" options, extra double checking, extra asserts...
    Weak - that will be a mode that is not as secure. It will be more compatible or faster then Desktop
    WeakXen - takes all steps needed to allow Xen (and wine?) at cost of lowering kernel protection
    Weaker - takes normal kernel and just turns on the low-cost simple protections, for full speed and compatibility, e.g. like hiding all processes of other users, adding some loggin and other "why not this isn't harming even most not-pro users".
		NoProtect - vanilla kernel with default settings and no additional protection in comparsion to standard kernel (only upside is that it is deterministc build)
    MempoBox - desktop running on selected hardware. Like Desk but all not used drivers can be removed making things MUCH more secure, easy and fast (to build/test).
    MempoBunker - server running on selected hardware, like ServMax.

,------,--------,-------,------------,--------,------------,----------------,
| Done | Target |For    | Also works | Kernel |  Variant   | Full Name for  |
| yet? | Arch   |Debian | with       |        |            | run-flavour.sh |
|------+--------+-------+------------+--------+------------+----------------|
| YES! | x86_64 | Deb7  |            | 3.2.x  | ServMax    | deb7/servmax   |
| YES! | x86_64 | Deb7  |            | 3.2.x  | Serv       | deb7/serv      |
| YES! | x86_64 | Deb7  |            | 3.2.x  | Desk       | deb7/desk      |
| YES! | x86_64 | Deb7  |            | 3.2.x  | DeskMax    | deb7/deskmax   |
| wip  | x86_64 | Deb7  |            | 3.2.x  | Weak       |                |
| wip  | x86_64 | Deb7  |            | 3.2.x  | WeakXen    |                |
| wip  | x86_64 | Deb7  |            | 3.2.x  | Weaker     |                |
|------+--------+-------+------------+--------+------------|                |
|  p?  | i386   | Deb7  |            | 3.2.x  | ServMax    |                |
|  p?  | i386   | Deb7  |            | 3.2.x  | Desk       |                |
|------+--------+-------+------------+--------+------------|                |
|      | x86_64 | Deb8  | Deb7       | 3.14.x | ServMax    |                |
|      | x86_64 | Deb8  | Deb7       | 3.14.x | Serv       |                |
|  F?  | x86_64 | Deb8  | Deb7       | 3.14.x | Desk       |                |
|  F?  | x86_64 | Deb8  | Deb7       | 3.14.x | DeskMax    |                |
|      | x86_64 | Deb8  | Deb7       | 3.14.x | Weak       |                |
|      | x86_64 | Deb8  | Deb7       | 3.14.x | WeakXen    |                |
|      | x86_64 | Deb8  | Deb7       | 3.14.x | Weaker     |                |
|------+--------+-------+------------+--------+------------|                |
|  p   | Arm11  | RPian |            | ?      | ServMax    |                |
|  p   | Arm11  | RPian |            | ?      | Desk       |                |
|------+--------+-------+------------+--------+------------+----------------|
| p = planned in not so far away future                                     |
| F = works, in a fork (ask user kocka on IRC)                              |
| wip = in progress                                                         |
| RPian = raspbian                                                          |
| if nothing is written - then it's planned later                           |
,---------------------------------------------------------------------------'


=== How build works ===

This is needed for troubleshooting of build process and to develop it.

download-and-build-all.sh 
	download-and-build.sh "deb7/deskmax"
		remove old working dir (e.g. ~/deterministic-kernel/)
		github clone
		check github gpg signature with help of git-gpg-check (our program)
		go to the downloaded sources of eg https://github.com/mempo/deterministic-kernel.git and there:
			./run-flavour.sh "deskmax"
				load env-data
				check preconditions like UID, PWD, disk free
				prepare-toolchain.sh
					with help of lib dpkg-vercomp.sh
					checks exact version of needed packages
				kernel-build/linux-mempo/all.sh "deb7/deskmax"
					get-sources.sh "deb7/deskmax" - it gets the files locally (copy them) and verify
					build-run.sh "deb7/deskmax" - starts the build since now sources are fully ready
						it sets export linuxdir="linux-3.2.64"
						patch.sh "linux-3.2.64"
							build.sh - calls the actuall build
								set various env variables and settings to get reproducible build
								in faketime (and nice etc) call:
									make-kpkg


=== Build and RELEASE (distribute) system for use in mempo. ===

This section is for people going to deploy the build bot.

First, the tools are mainly in other git repo, in:
https://github.com/mempo/mempobot
Use this repository, primarly to get the script download-and-build-all.sh , this
script will in turn download actuall script/patches that constitute our SameKernel.

The build model here is related to:
https://github.com/rfree2/fossoffice/blob/master/task/aptmempo/repo-server/server.txt

We need users: 
BUILD   - kernelbuild: the user (must be called "kernelbuild" usually) who runs the build process
SIGN    - repomake: the user who has gpg keys for signing the deb of kernel [and possibly own repo)
UPLOAD  - reposend: the user who can upload files to file-server (e.g. to http server)

Life of a deb package:
foo.deb - sha=7777cccc deterministically build package - created by user BUILD
foo.deb - sha=7777cccc deterministically build package by other user (always same checksum)
foo.deb.sig   - the signature on orginal deb sha=7777cccc - by SIGN
~/repos/.../pool/f/foo.deb - the file sha=7777cccc that is prepared to be served as debian-repo - by SIGN
~/repost...manifest        - the manifest, including the new file 7777cccc and previous ones - by SIGN
/var/www/...pool/f/foo.deb - the file being served by file-server - copied there by UPLOAD
/var/www/...manifest       - the file being served by file-server - copied there by UPLOAD
/var/www/sign/foo.deb.sig  - uploaded by UPLOAD

/home/kernelbuild/build/foo.deb <- created by BUILD
/home/kernelbuild/publish/foo.deb <- copy by BUILD (this dir is chmod 755)
/home/kernelbuild/publish/sign/foo/ <- signed by SIGN (this dir is chgrp SIGN, chmod g+rwx)
/home/makerepo/repo-prepare/ <- SIGN created by reprepro
(srv) /var/www/repo/.. <- uploaded entire tree from repo-prepare/ by UPLOAD

chmod 755 /home/kernelbuild/publish/
chmod 755 /home/makerepo/repo-prepare/

/home/kernelbuild/deterministic-kernel/ <-- build happens here
/home/kernelbuild/build/ <-- symlink to build dir with *.deb
/home/kernelbuild/publish <-- symlink to place that should contain *.deb for publishing
/home/kernelbuild/publish/sign <-- this will be chowned so that SIGN user can create .deb.sig there

Actions:

1. build kernel with ./run.sh (or triggered by BOTBUILD) and copy results to public
2. sign to .deb.sig 
3. run reprepro to compile+sign the repository
4. upload the repository
5. upload the sig


Additional users:
BOTBUILD - observes github (or other source) and triggers the build process when new version
BOTSAY   - observes github (or other source) and announces new version to various systems

=== Verification-Details ===

This is for users/developers who wish to repeat the build process to confirm that it really does match the published checksum. 

The goal of this script is that the resulting .deb are identical.

Since somewhere before version afair 0.1.50 at least, it is possible to confirm the builds, but there are some quirks sometimes.

You need to fullfil many conditions for the build to give exact identical result.
Sometimes, you are not warned by some detail (that we overlooked) and this is why you are getting other checksum.
Read this section carefully to know about all this pitfalls.
In time, all quirks will be verified so verification will be even easier.

* First, read details of building as in http://wiki.debian.org/SameKernel/
especially the #build section.

* [libc] libc version must be identical to the one used in build. Versions since early version (around v0.1.50 afair) check for that detail for you.

* [libz] lib z / -dev version must be identical. Check for that was added at some point.

* [home_readlink] Not only the $PWD must be identical: /home/kernelbuild, but in addition the real name, e.g. readpath /home/kernelbuild must also be identical. 
Some of the officially released kernels (on http://deb.mempo.org/ and previously in archives) 
might require that the readpath is /homebig/kernelbuild/ 
or /home2/kernelbuild/

Check for that is being added now (in special tag for version v0.1.98, so should be normal part of v0.1.99 and the expected path is on top of run-flavour.sh).

See difference between unpacked files to find out what is the real path.
If you see there /homebig (or /home2) then you must create identical setup.
If you do not have a separate partition for that, this can be "faked" with mount -o bind.
For example, as root:

mkdir /home/fakehome/ 
mv -i /home/kernelbuild/ /home/fakehome/   # move real data
mkdir /homebig
mount /home/fakehome/ /homebig  -o bind   # the bind
unlink /home/kernelbuild   # remove old link
ln -s /homebig/kernelbuild /home/kernelbuild
echo "CHECK:" ; readlink /home/kernelbuild
echo "Should say that this is in example /homebig/kernelbuild or /home/kernelbuild - the readlink directory that you want to fake"

So /home/kernelbuild will be a symlink into /homebig/kernelbuild , and in that directory 
you will create/download all the files e.g. mempobot or deterministic-kernel. 

Once you have the condition that:
	$HOME is /home/kernelbuild 
	and readlink $HOME is /homebig/kernelbuild
then home / readlink home situation is solved, and you should
enter that directory and execute the normal build procesdure (so e.g. for v0.1.98 it would be to run mempobot script download-and-build-all.sh as described above). 

Please appologize for this problem, was not expecting that some build tools not only save directory/pwd in metadata but even readlink/realname of it, and took some time to get around to add check for it in the scripts.

