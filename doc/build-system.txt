
*** This document here is most definitive. ***

Also first see README.md file.

Use this document, it is most definitive (how ever also check other sources if they would happen
to have additional remarks sometimes)
* read additional info on http://wiki.debian.org/Mempo/SameKernel
* QUESTIONS - then contact us: http://wiki.debian.org/Mempo/Mempo
* QUESTIONS: chat with us on IRC on #mempo on irc.oftc.net or best on anonymous irc2p 
  (geti2p.net), or irc.freenode.org. And WAIT for THE REPLY 48 hours. Repeat question.
* source code: https://github.com/mempo/ . Check always the GPG signature.

=== As the user ===

To simply use the mempo kernels, download them from deb.mempo.org (or .i2p), consult
section "Variants" below.

To build them from sources just start ./run-flavour.sh "deskmax" or similar, but first
you need to install few tools. The build script should stop and tell you what to do.

=== How to prepare new upgrade ===

This is for co-developers who wish to prepare a new version of mempo (e.g. when new grsecurity
is out).
Read info in README.md (and rest of this document here).

=== Variants ===

This is how we now imaging which versions should be provided for users (there is a security versus performance/compatibility tradeoff).

E.g. in most secure mode things are slower, Xen is blocked, Wine is blocked, most X drivers are blocks, and other things work but are made harder e.g. no auto-loading or auto-mounting - need to write scripts to make this easy for user again.

Variants of kernel config (not all are yet implemented):

    Desk - this is the current variant (previously named good). It turns out all protections (especially in recent versions) except ioport/kmem blocks and [since 2014.08.21] except some options that are considered too restrictive for desktop, e.g. without some proc restrictions that block sound system etc.
    DeskMax - [since 2014.08.21] (previously Desk had this role basically) this is the spartan desktop, allows ioport/kmem (as long as it's needed for most gfx cards) but blocks everything else e.g. even sound support possibly
    Serv - for servers mostly this will also turn on ioport/kmem, meaning that kernel will be extremely strongly protected from being damaged by other programs or most parts of kernel. Desktops can use this too but will need a fix to X server and require open good gfx drivers.
    ServMax - same but could turn on various "paranoid" options, extra double checking, extra asserts...
    Weak - that will be a mode that is not as secure. It will be more compatible or faster then Desktop
    WeakXen - takes all steps needed to allow Xen (and wine?) at cost of lowering kernel protection
    Weaker - takes normal kernel and just turns on the low-cost simple protections, for full speed and compatibility, e.g. like hiding all processes of other users, adding some loggin and other "why not this isn't harming even most not-pro users".
		NoProtect - vanilla kernel with default settings and no additional protection in comparsion to standard kernel (only upside is that it is deterministc build)
    MempoBox - desktop running on selected hardware. Like Desk but all not used drivers can be removed making things MUCH more secure, easy and fast (to build/test).
    MempoBunker - server running on selected hardware, like ServMax.

,------,--------,-------,------------,--------,------------,
| Done | Target |For    | Also works | Kernel |  Variant   | 
| yet? | Arch   |Debian | with       |        |            |
|------+--------+-------+------------+--------+------------|
| wip  | x86_64 | Deb7  |            | 3.2.x  | ServMax    |
| wip  | x86_64 | Deb7  |            | 3.2.x  | Serv       |
| YES! | x86_64 | Deb7  |            | 3.2.x  | Desk       |
| YES! | x86_64 | Deb7  |            | 3.2.x  | DeskMax    |
| wip  | x86_64 | Deb7  |            | 3.2.x  | Weak       |
| wip  | x86_64 | Deb7  |            | 3.2.x  | WeakXen    |
| wip  | x86_64 | Deb7  |            | 3.2.x  | Weaker     |
|------+--------+-------+------------+--------+------------|
|  p?  | i386   | Deb7  |            | 3.2.x  | ServMax    |
|------+--------+-------+------------+--------+------------|
|      | x86_64 | Deb8  | Deb7       | 3.14.x | ServMax    |
|      | x86_64 | Deb8  | Deb7       | 3.14.x | Serv       |
|  F?  | x86_64 | Deb8  | Deb7       | 3.14.x | Desk       |
|  F?  | x86_64 | Deb8  | Deb7       | 3.14.x | DeskMax    |
|      | x86_64 | Deb8  | Deb7       | 3.14.x | Weak       |
|      | x86_64 | Deb8  | Deb7       | 3.14.x | WeakXen    |
|      | x86_64 | Deb8  | Deb7       | 3.14.x | Weaker     |
|------+--------+-------+------------+--------+------------|
|  p   | Arm11  | RPian|             | ?      | ServMax    |
|  p   | Arm11  | RPian|             | ?      | Desk       |
|------+--------+-------+------------+--------+------------|
| p = planned in not so far away future                    |
| F = works, in a fork (ask user kocka on IRC)             |
| wip = in progress                                        |
| RPian = raspbian                                         |
| if nothing is written - then it's planned later          |
,----------------------------------------------------------,


=== How build works ===

This is needed for troubleshooting of build process and to develop it.

download-and-build-all.sh 
	download-and-build.sh "deskmax"
		remove old working dir (e.g. ~/deterministic-kernel/)
		github clone
		check github gpg signature with help of git-gpg-check (our program)
		go to the downloaded sources of eg https://github.com/mempo/deterministic-kernel.git and there:
			./run-flavour.sh "deskmax"
				load env-data
				check preconditions like UID, PWD, disk free
				prepare-toolchain.sh
					with help of lib dpkg-vercomp.sh
					checks exact version of needed packages
				kernel-build/linux-mempo/all.sh "deskmax"
					get-sources.sh "deskmax" - it gets the files locally (copy them) and verify
					build-run.sh "deskmax" - starts the build since now sources are fully ready
						it sets export linuxdir="linux-3.2.64"
						patch.sh "linux-3.2.64"
							build.sh - calls the actuall build
								set various env variables and settings to get reproducible build
								in faketime (and nice etc) call:
									make-kpkg


=== Build and RELEASE (distribute) system for use in mempo. ===

This section is for people going to deploy the build bot.

First, the tools are mainly in other git repo, in:
https://github.com/mempo/mempobot

The build model here is related to:
https://github.com/rfree2/fossoffice/blob/master/task/aptmempo/repo-server/server.txt

We need users: 
BUILD   - kernelbuild: the user (must be called "kernelbuild" usually) who runs the build process
SIGN    - repomake: the user who has gpg keys for signing the deb of kernel [and possibly own repo)
UPLOAD  - reposend: the user who can upload files to file-server (e.g. to http server)

Life of a deb package:
foo.deb - sha=7777cccc deterministically build package - created by user BUILD
foo.deb - sha=7777cccc deterministically build package by other user (always same checksum)
foo.deb.sig   - the signature on orginal deb sha=7777cccc - by SIGN
~/repos/.../pool/f/foo.deb - the file sha=7777cccc that is prepared to be served as debian-repo - by SIGN
~/repost...manifest        - the manifest, including the new file 7777cccc and previous ones - by SIGN
/var/www/...pool/f/foo.deb - the file being served by file-server - copied there by UPLOAD
/var/www/...manifest       - the file being served by file-server - copied there by UPLOAD
/var/www/sign/foo.deb.sig  - uploaded by UPLOAD

/home/kernelbuild/build/foo.deb <- created by BUILD
/home/kernelbuild/publish/foo.deb <- copy by BUILD (this dir is chmod 755)
/home/kernelbuild/publish/sign/foo/ <- signed by SIGN (this dir is chgrp SIGN, chmod g+rwx)
/home/makerepo/repo-prepare/ <- SIGN created by reprepro
(srv) /var/www/repo/.. <- uploaded entire tree from repo-prepare/ by UPLOAD

chmod 755 /home/kernelbuild/publish/
chmod 755 /home/makerepo/repo-prepare/

/home/kernelbuild/deterministic-kernel/ <-- build happens here
/home/kernelbuild/build/ <-- symlink to build dir with *.deb
/home/kernelbuild/publish <-- symlink to place that should contain *.deb for publishing
/home/kernelbuild/publish/sign <-- this will be chowned so that SIGN user can create .deb.sig there

Actions:

1. build kernel with ./run.sh (or triggered by BOTBUILD) and copy results to public
2. sign to .deb.sig 
3. run reprepro to compile+sign the repository
4. upload the repository
5. upload the sig


Additional users:
BOTBUILD - observes github (or other source) and triggers the build process when new version
BOTSAY   - observes github (or other source) and announces new version to various systems


